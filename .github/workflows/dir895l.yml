name: Fetch Latest OpenWrt ImageBuilder and Build Firmware

on:
  schedule:
    - cron: '0 0 1 * *'  # Run at midnight on the first day of each month
  workflow_dispatch:  # Allow manual trigger

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      TARGET: bcm53xx
      PROFILE: dlink_dir-885l  # Set your device profile here
      TITLE: "D-LINK DIR-895L"  # Add a descriptive title
      PACKAGES: "nano wget git kmod-usb-net-cdc-ncm kmod-usb-net-huawei-cdc-ncm kmod-usb-net-rndis luci luci-ssl mwan3 luci-app-mwan3"  # List your desired packages

    steps:
      # Step 1: Fetch the latest stable OpenWrt version
      - name: Fetch latest stable OpenWrt version
        id: openwrt_version
        run: |
          BASE_URL="https://downloads.openwrt.org/releases"
          STABLE_RELEASE=$(curl -s https://downloads.openwrt.org/releases/ | grep -oP '(?<=href=")(19\.[0-9]+\.[0-9]+|20\.[0-9]+\.[0-9]+|21\.[0-9]+\.[0-9]+|22\.[0-9]+\.[0-9]+|23\.[0-9]+\.[0-9]+)(?=/)' | sort -V | tail -n1)
          echo "LATEST_OPENWRT_VERSION=${STABLE_RELEASE}" >> $GITHUB_ENV

      # Step 2: Check if release for the current OpenWrt version already exists
      - name: Check if release exists
        id: check_release
        run: |
          TAG_NAME="${{ env.LATEST_OPENWRT_VERSION }}"  # Use version as tag name
          EXISTING_RELEASE=$(curl -s https://api.github.com/repos/<your-github-repo>/releases | jq -r --arg tag "$TAG_NAME" '.[] | select(.tag_name == $tag)')
          if [ -z "$EXISTING_RELEASE" ]; then
            echo "RELEASE_ALREADY_EXISTS=false" >> $GITHUB_ENV
            echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_ENV
          else
            echo "RELEASE_ALREADY_EXISTS=true" >> $GITHUB_ENV
          fi

      # Step 3: Skip build if release already exists
      - name: Skip if release exists
        if: ${{ env.RELEASE_ALREADY_EXISTS == 'true' }}
        run: |
          echo "Skipping build because release titled ${{ env.TAG_NAME }} already exists."
          exit 0

      # Step 4: Download the latest OpenWrt ImageBuilder for the specified target
      - name: Download OpenWrt ImageBuilder
        if: ${{ env.RELEASE_ALREADY_EXISTS == 'false' }}
        run: |
          IMAGEBUILDER_URL="https://downloads.openwrt.org/releases/${{ env.LATEST_OPENWRT_VERSION }}/targets/${{ env.TARGET }}/generic/openwrt-imagebuilder-${{ env.LATEST_OPENWRT_VERSION }}-${{ env.TARGET }}-generic.Linux-x86_64.tar.xz"
          echo "Downloading OpenWrt ImageBuilder from: $IMAGEBUILDER_URL"
          wget $IMAGEBUILDER_URL -O imagebuilder.tar.xz
          tar -xf imagebuilder.tar.xz
          cd openwrt-imagebuilder-${{ env.LATEST_OPENWRT_VERSION }}-${{ env.TARGET }}-generic.Linux-x86_64
          sudo apt-get install subversion build-essential libncurses5-dev zlib1g-dev gawk git ccache gettext libssl-dev xsltproc wget
          make info

      # Step 5: Build custom OpenWrt image using the specified profile and packages
      - name: Build custom OpenWrt image
        if: ${{ env.RELEASE_ALREADY_EXISTS == 'false' }}
        run: |
          ls
          make image PROFILE=${{ env.PROFILE }} \
          PACKAGES="${{ env.PACKAGES }}"

      # Step 6: Rename firmware to reflect target, profile, and version
      - name: Rename firmware to reflect target, profile, and version
        if: ${{ env.RELEASE_ALREADY_EXISTS == 'false' }}
        run: |
          mv bin/targets/${{ env.TARGET }}/generic/openwrt-${{ env.TARGET }}-generic-squashfs.bin openwrt-${{ env.LATEST_OPENWRT_VERSION }}-${{ env.TARGET }}-generic-${{ env.PROFILE }}-${{ env.TITLE }}.bin

      # Step 7: Create GitHub Release and Upload Firmware
      - name: Create GitHub Release and Upload Firmware
        if: ${{ env.RELEASE_ALREADY_EXISTS == 'false' }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.LATEST_OPENWRT_VERSION }}  # Use the version as the tag
          release_name: "${{ env.LATEST_OPENWRT_VERSION }}-${{ env.TARGET }}-${{ env.TITLE }}"  # Dynamic release name
          files: openwrt-${{ env.LATEST_OPENWRT_VERSION }}-${{ env.TARGET }}-generic-${{ env.PROFILE }}-${{ env.TITLE }}.bin
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      # Step 8: Cleanup
      - name: Cleanup
        if: ${{ env.RELEASE_ALREADY_EXISTS == 'false' }}
        run: |
          rm -rf imagebuilder.tar.xz openwrt-imagebuilder-${{ env.LATEST_OPENWRT_VERSION }}-${{ env.TARGET }}-generic.Linux-x86_64
